Python 2.7.11
ZGF0YS5weQ0KaW1wb3J0IHV0aWxzIGFzIHV0DQpkZWYgY3N2X3RvX2tub3dsZWRnZShjc3ZfZmlsZV9wYXRoKToNCiAgICBjc3ZfZmlsZV9yZWFkZXI9b3Blbihjc3ZfZmlsZV9wYXRoLCdyJykNCiAgICBrbm93bGVkZ2U9e30NCiAgICBmaXJzdD1UcnVlDQogICAgZmVhdHVyZXNfbWV0YWRhdGE9c2V0KCkNCiAgICBmZWF0dXJlX2RhdGE9e30NCiAgICBmb3IgbGluZSBpbiBjc3ZfZmlsZV9yZWFkZXI6DQogICAgICAgIGlmIGZpcnN0Og0KICAgICAgICAgICAgZmV0X2FuZF9jbHM9dXQuc3BsaXR0ZXIobGluZSkNCiAgICAgICAgICAgIGZlYXR1cmVzX25hbWVzPWZldF9hbmRfY2xzWzpsZW4oZmV0X2FuZF9jbHMpLTFdDQogICAgICAgICAgICBmb3IgZm4gaW4gZmVhdHVyZXNfbmFtZXM6DQogICAgICAgICAgICAgICAgZmVhdHVyZV9kYXRhW2ZuXT1zZXQoKQ0KICAgICAgICAgICAgY2xhc3NfY2F0ZWdvcnk9ZmV0X2FuZF9jbHNbLTFdDQogICAgICAgICAgICBmZWF0dXJlc19jb3VudD1sZW4oZmVhdHVyZXNfbmFtZXMpDQogICAgICAgICAgICBjbGFzc2VzPVtdDQogICAgICAgICAgICBmaXJzdCA9IEZhbHNlDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBmZXRfYW5kX2NscyA9IHV0LnNwbGl0dGVyKGxpbmUpDQogICAgICAgICAgICBmZWF0dXJlcyA9IGZldF9hbmRfY2xzWzpmZWF0dXJlc19jb3VudF0NCiAgICAgICAgICAgIGNsYXNzX2JlbG9uZ2VkID0gZmV0X2FuZF9jbHNbLTFdDQogICAgICAgICAgICBjbGFzc19kYXRhPWtub3dsZWRnZS5nZXQoY2xhc3NfYmVsb25nZWQse30pDQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShmZWF0dXJlc19jb3VudCk6DQogICAgICAgICAgICAgICAgZmVhdHVyZXNfbWV0YWRhdGEuYWRkKGZlYXR1cmVzX25hbWVzW2ldKyJfIisoZmVhdHVyZXNbaV0pKQ0KICAgICAgICAgICAgICAgIGZlYXR1cmVfZGF0YVtmZWF0dXJlc19uYW1lc1tpXV0uYWRkKGZlYXR1cmVzW2ldKQ0KICAgICAgICAgICAgICAgIGZlYXR1cmVzX2NvdW50X2N1cnJlbnQ9Y2xhc3NfZGF0YS5nZXQoZmVhdHVyZXNfbmFtZXNbaV0rIl8iK2ZlYXR1cmVzW2ldLDApDQogICAgICAgICAgICAgICAgZmVhdHVyZXNfY291bnRfY3VycmVudCs9MQ0KICAgICAgICAgICAgICAgIGNsYXNzX2RhdGFbZmVhdHVyZXNfbmFtZXNbaV0rIl8iK2ZlYXR1cmVzW2ldXT1mbG9hdChmZWF0dXJlc19jb3VudF9jdXJyZW50KQ0KICAgICAgICAgICAga25vd2xlZGdlW2NsYXNzX2JlbG9uZ2VkXT1jbGFzc19kYXRhDQogICAgICAgICAgICBjbGFzc2VzLmFwcGVuZChjbGFzc19iZWxvbmdlZCkNCiAgICBmb3IgY2xhc3NfbmFtZSxjbGFzc19kYXRhIGluIGtub3dsZWRnZS5pdGVyaXRlbXMoKToNCiAgICAgICAgZXZlPWNsYXNzX2RhdGEua2V5cygpDQogICAgICAgIGZvciBmZWF0dXJlIGluIGZlYXR1cmVzX21ldGFkYXRhOg0KICAgICAgICAgICAgaWYgZmVhdHVyZSBub3QgaW4gZXZlOg0KICAgICAgICAgICAgICAgIGNsYXNzX2RhdGFbZmVhdHVyZV09MC4wDQogICAga25vd2xlZGdlWyJjbGFzc2VzIl09Y2xhc3Nlcw0KICAgIGtub3dsZWRnZVsiZmVhdHVyZXNfZGF0YSJdPWZlYXR1cmVfZGF0YQ0KICAgIHJldHVybiBrbm93bGVkZ2UNCmRlZiBrbm93bGVkZ2VfdG9fcHJvYnMoa25vd2xlZGdlKToNCiAgICB0cmFpbmVkX2RhdGE9e30NCiAgICBjbGFzc2VzPWtub3dsZWRnZVsiY2xhc3NlcyJdDQogICAgZGVsIGtub3dsZWRnZVsiY2xhc3NlcyJdDQogICAgZmVhdHVyZXNfZGF0YT1rbm93bGVkZ2VbImZlYXR1cmVzX2RhdGEiXQ0KICAgIGRlbCBrbm93bGVkZ2VbImZlYXR1cmVzX2RhdGEiXQ0KICAgIGRpc3RpbmN0X2NsYXNzZXM9bGlzdChzZXQoY2xhc3NlcykpDQogICAgcmVjb3Jkcz1mbG9hdChsZW4oY2xhc3NlcykpDQogICAgZm9yIGNsYXNzX2QgaW4gZGlzdGluY3RfY2xhc3NlczoNCiAgICAgICAgY291bnQ9ZmxvYXQobGVuKGZpbHRlcihsYW1iZGEgeDogeD09Y2xhc3NfZCxjbGFzc2VzKSkpDQogICAgICAgIHRyYWluZWRfZGF0YVtjbGFzc19kXT1jb3VudC9yZWNvcmRzDQogICAgZm9yIGNsYXNzX2Msc2V0X29mX3Byb2JzIGluIGtub3dsZWRnZS5pdGVyaXRlbXMoKToNCiAgICAgICAgZm9yIGluZGl2aV9wcm9icyxjb3VudF9wcm9iIGluIHNldF9vZl9wcm9icy5pdGVyaXRlbXMoKToNCiAgICAgICAgICAgIGZlYXR1cmVzX25hbWU9aW5kaXZpX3Byb2JzLnNwbGl0KCJfIilbMF0NCiAgICAgICAgICAgIGNvdW50ID0gZmxvYXQobGVuKGZpbHRlcihsYW1iZGEgeDogeCA9PSBjbGFzc19jLCBjbGFzc2VzKSkpDQogICAgICAgICAgICB0cmFpbmVkX2RhdGFbY2xhc3NfYysiXyIraW5kaXZpX3Byb2JzXT0oY291bnRfcHJvYisxKS8oY291bnQrbGVuKGZlYXR1cmVzX2RhdGFbZmVhdHVyZXNfbmFtZV0pKQ0KICAgIHRyYWluZWRfZGF0YVsiY2xhc3NlcyJdPWRpc3RpbmN0X2NsYXNzZXMNCiAgICByZXR1cm4gdHJhaW5lZF9kYXRhDQpkZWYgY3N2X3RvX3ByZWRpY3QoY3N2X2ZpbGVfcGF0aCk6DQogICAgY3N2X2ZpbGVfcmVhZGVyID0gb3Blbihjc3ZfZmlsZV9wYXRoLCAncicpDQogICAgZmlyc3QgPSBUcnVlDQogICAgcHJlZGljdD1bXQ0KICAgIGZvciBsaW5lIGluIGNzdl9maWxlX3JlYWRlcjoNCiAgICAgICAgaWYgZmlyc3Q6DQogICAgICAgICAgICBmZWF0dXJlcz11dC5zcGxpdHRlcihsaW5lKQ0KICAgICAgICAgICAgZmVhdHVyZXNfY291bnQ9bGVuKGZlYXR1cmVzKQ0KICAgICAgICAgICAgZmlyc3Q9RmFsc2UNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGQgPSBbXQ0KICAgICAgICAgICAgdmFscz11dC5zcGxpdHRlcihsaW5lKQ0KICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoZmVhdHVyZXNfY291bnQpOg0KICAgICAgICAgICAgICAgIGQuYXBwZW5kKGZlYXR1cmVzW2ldKyJfIit2YWxzW2ldKQ0KICAgICAgICAgICAgcHJlZGljdC5hcHBlbmQoZCkNCiAgICByZXR1cm4gcHJlZGljdA0KZGVmIHByZWRpY3QodHJhaW5lZF9kYXRhLHByZWRpY3RfaXQpOg0KICAgIGNsYXNzZXM9dHJhaW5lZF9kYXRhWyJjbGFzc2VzIl0NCiAgICBkZWwgdHJhaW5lZF9kYXRhWyJjbGFzc2VzIl0NCiAgICBmb3IgcHJlZGljdGFibGUgaW4gcHJlZGljdF9pdDoNCiAgICAgICAgbGlrZWxpaG9vZCA9IHt9DQogICAgICAgIGZvciBjbGFzc19pIGluIGNsYXNzZXM6DQogICAgICAgICAgICB0aGlzX2xpa2xpPTEuMA0KICAgICAgICAgICAgZm9yIGZlYXR1cmVzIGluIHByZWRpY3RhYmxlOg0KICAgICAgICAgICAgICAgIHRoaXNfbGlrbGk9dGhpc19saWtsaSp0cmFpbmVkX2RhdGFbY2xhc3NfaSsiXyIrZmVhdHVyZXNdDQogICAgICAgICAgICB0aGlzX2xpa2xpPXRoaXNfbGlrbGkqdHJhaW5lZF9kYXRhW2NsYXNzX2ldDQogICAgICAgICAgICBsaWtlbGlob29kW2NsYXNzX2ldPXRoaXNfbGlrbGkNCiAgICAgICAgbWF4PTANCiAgICAgICAgbWF4X2NhdGU9IiINCiAgICAgICAgZm9yIGNhdGUsY2F0ZV92YWxlIGluIGxpa2VsaWhvb2QuaXRlcml0ZW1zKCk6DQogICAgICAgICAgICBpZiBjYXRlX3ZhbGU+bWF4Og0KICAgICAgICAgICAgICAgIG1heD1jYXRlX3ZhbGUNCiAgICAgICAgICAgICAgICBtYXhfY2F0ZT1jYXRlDQogICAgICAgIHByaW50IHByZWRpY3RhYmxlLG1heF9jYXRlDQptYWluLnB5DQppbXBvcnQgZGF0YV9wYXJzZXIgYXMgZHANCmltcG9ydCBzZXR0aW5ncyBhcyBzdA0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBrPWRwLmNzdl90b19rbm93bGVkZ2Uoc3QuREFUQV9GSUxFKQ0KICAgIHQ9ZHAua25vd2xlZGdlX3RvX3Byb2JzKGspDQogICAgcD1kcC5jc3ZfdG9fcHJlZGljdChzdC5QUkVESUNUX0ZJTEUpDQogICAgZHAucHJlZGljdCh0LHApDQpzZXR0aW5ncy5weQ0KREFUQV9GSUxFPSJkYXRhc2V0XFxkYXRhMy5jc3YiDQpQUkVESUNUX0ZJTEU9ImRhdGFzZXRcXHByZWRpY3QuY3N2Ig0KdXRpbHMucHkNCmRlZiBzcGxpdHRlcihzdHJfbGluZSxzZXA9IiwiKToNCiAgICByZXR1cm4gc3RyX2xpbmUuc3RyaXAoKS5zcGxpdChzZXAp
